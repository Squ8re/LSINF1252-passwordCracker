Architecture:

1) Structures de données (représentation des mots de passe, etc):
	- Représentation d'un hash: un tableau de 32 uint8_t, car un hash est encodé sur 32 bytes (1 byte = 8 bits = 1 uint8_t) et car c'est sous ce format-là que la fonction reversehash (fournie) attend de recevoir un hash.
	
	- Représentation d'un mot de passe: On n'utilise pas de structure pour représenter le mot de passe, car on n'a jamais besoin d'accéder à plusieurs "attributs" du mot de passe en même temps. Avant le reversehash, on aura uniquement besoin des hashes et après reversehash on aura uniquement besoin des versions "en clair".
	Ainsi, les mots de passe seront tantôt représentés par un "char *" de taille inconnue au préalable (version en clair), et tantôt ils seront représentés par un "uint8_t password[32]" (version hashée).
	
	- Ensemble des mots de passe pas encore traités (= des hashes): une liste chainée de hashes. Techniquement, si on traite le fichier par "blocs" (cf. réponse à notre question Moodle), alors une partie des mots de passe pas encore traités sera encore dans le fichier et l'autre sera dans une telle liste chainée, mais c'est un détail.
	
	- Ensemble des mots de passe constituant les "meilleurs candidats" à un instant donné: une liste chainée de "char *" représentant les versions "en clair" des mots de passe qui ont été retenus comme "meilleurs candidats".
	
	- Meilleur score à un instant donné (pas sur que ce soit utile d'en parler mais bon dans le doute...): un int (voire un unsigned int?) qui dénombre le nombre de consonnes ou de voyelles (selon le cas voulu) des meilleurs mots de passe retenus à un instant donné. Il constitue donc un score que l'on veut maximiser.


2) Types de threads et tâches réalisées:
	- Le thread principal: il fait tourner la 'main' et est le parent de tous les threads de calcul mentionnés ci-dessous. Il récupère les arguments de la ligne de commande, démarre les threads de calcul en respectant les contraintes imposées par les arguments passés par l'utilisateur, attend que ces threads de calcul aient terminé leur tâche et gère le "retour vers l'utilisateur" (il s'occuppe d'afficher les résultats).
	Si notre petite requête sur Moodle est acceptée, le workflow du thread principal (et donc de la main) est le suivant:
		- Récupérer les arguments de la ligne de commande
		- Tant que le fichier n'a pas été lu entièrement:
			- Lire un bloc du fichier (de taille prédéfinie)
			- Créer la linked list de hashes correspondant à ce bloc
			- Lancer les N threads de calcul qui vont mettre à jour la liste des versions "en clair" des meilleurs candidats de ce bloc, ainsi que la valeur "best_score", égale au score desdits meilleurs candidats.
			- Finaliser les N threads
		- Quand on a vidé le fichier (bloc par bloc), informer l'utilisateur du résultat du calcul
		NOTE: Ne pas oublier de gérer les erreurs avec un système de codes d'erreur.

	- Les threads de calcul: ils sont au nombre de N (N est spécifié par l'utilisateur et vaut 1 par défaut). Ils ont le workflow suivant:
		- Tant que la liste chainée (partagée entre les threads) n'est pas vide:
			- Prendre le hash au sommet de cette liste (en le retirant de celle-ci, c'est une sorte de "pop") (en s'appropriant cette ressource!)
			- reversehash ce hash. Si le score du mot de passe obtenu est égal au "best_score" (variable partagée entre les threads), ajouter le mot de passe "en clair" à la "liste des meilleurs candidats". Si le score du mot de passe obtenu est > à best_score, supprimer tous les éléments dans la "liste des meilleurs candidats" et y ajouter le mot de passe "en clair", puis mettre à jour le "best_score" avec le score de ce mot de passe. Sinon, ne rien faire de particulier.
			NOTE: toute interaction avec une ressource partagée doit se faire correctement (coordination des accès aux ressources partagées)
			(Si une erreur survient, retourner un code d'erreur approprié)
		- Si on arrive jusqu'ici, retourner un code d'erreur signalant le bon déroulement des opérations.


3) Méthodes de communication entre les threads:
	- Les threads de calcul "communiquent" entre eux au travers des trois ressources partagées citées au point suivant. Ces interactions se font de manière sécurisée en utilisant les bon protocoles d'interaction (voir point suivant).
	
	- Type de mutex/sémaphore/etc utilisé? Pourquoi?
	

4) Informations communiquées entre les threads:
	- Les ressources partagées sont  "liste des meilleurs candidats", "liste des hash pas encore traités" et "best_score". Ainsi, les informations communiquées entre les threads sont celles qui sont contenues dans ces variables, à savoir: les hashes pas encore traités, le meilleur score à un instant donné et la liste des candidats les plus prometteurs à cet instant.
	
	- Ces ressources partagées se trouvent dans le heap, car cette zone mémoire est partagée entre les threads.
	


Autres options considérées (mais moins bien):
	- Lire tout le fichier d'un coup dans la mémoire (= faire un seul bloc dont la taille est celle du fichier entier)
	- Lire le fichier au fur et à mesure qu'on déchiffre les hashes. Moins bien car la lecture est potentiellement plus lente.