Plusieurs fichiers: il faut les lire avec un seul thread (car une seule tête de lecture)

Ces fichiers sont lus dans un buffer, dont la taille est k*N (avec k = 2, 3, ... et avec N = nombre de threads de calcul)
Le programme est efficace si ce buffer est toujours rempli, car cela signifie que le thread producteur n'induit aucun blocage
sur les threads de calcul.

N threads de calcul lisent les hashes dans ce buffer et les inversent. Idéalement, N = nombre de coeurs à notre disposition (généralement 4)

Ces threads mettent, dans  un second buffer, les versions "en clair". La taille de ce buffer est de k*N (en reprenant la même logique que précédemment). Le programme est efficace si ce buffer est toujours vide, car ainsi on sait que le(s) thread(s) cité(s) ci-après ne bloque(nt) pas les threads de calcul.

Finalement, 1 (ou 2) threads s'occuppent de gérer les meilleurs candidats, le meilleur score, etc.
