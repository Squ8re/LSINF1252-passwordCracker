Fonctions:

	- main: parsing + créer les threads, mutex etc + retour vers user (E)
	- thread de lecture (E)
	- thread de reversing (A)
	- thread pour gérer les meilleurs scores etc (A)

Travailler sur des branches.
Afficher des messages d'erreur: fprintf(stderr, "This is an error called: %s and this is a number: %d", err_name, 42);

Ne pas oublier de malloc l'espace pour le '\0' dans les strings, sachant que strlen() donne le nombre de caracteres SANS le '\0'.

Pas besoin de free les mallocs avant de faire un exit ou un return du main.
Faire les fonctions dans un fichier separe: https://stackoverflow.com/questions/19732959/how-to-move-c-functions-into-separate-file
Note: attention a la maniere d'appeler gcc dans ce cas.

gcc -o cracker -Wall -Werror .\src\main.c .\src\custom_sleep.c

Certaines choses se retrouvent dans la stack de main (ou d'une autre fonction) et d'autres dans le heap (partage). Pourquoi? -> se poser la question et verifier qu'on a pas fait n'importe quoi au niveau de ce choix-la. En gros, il faut malloc ce qu'on veut pouvoir partager entre les threads.

Sous Linux, parfois gcc se fache et demande un flag "c99" ou "gnu99" -> utiliser le "gnu99" et PAS le "c99" sinon la fonction nanosleep de time.h n'est pas reconnue.

Compilation sous UDS: gcc -Wall -Werror -std=gnu99 -o cracker ./main.c ...autres .c requis...

Pour tester de printf avec des delais: ne pas oublier de flush (sinon tout s'affiche en une fois a la fin): fflush(stdout);

Faire des erreurs un peu explicites (avec errno?)

Mettre 'const' ce qui peut l'etre (securite) -> attention, un const sur un pointeur multiple ne protege que le "premier etage"

Si on remplace les exit par des return error_code, il faudra regarder la ou des free sont necessaires.

Rajouter des tests de type ( == NULL) sur les arguments des fonctions?

condition de terminaison des threads consommateurs: "file_read && buffer_empty"

Aller relire les questions sur Moodle

https://sites.uclouvain.be/SystInfo/notes/Theorie/html/Threads/threads.html -> "un thread doit pouvoir acceder a ses arguments"

detecter les memleaks: valgrind (sudo apt install valgrind), puis cf. http://valgrind.org/docs/manual/QuickStart.html

Tests:
Option inexistante donnee
Option existante necessitant une valeur donnee sans valeur
Option existante donnee plusieurs fois
Option necessaire non-donnee
Donner une valeur string a une option qui attend un int
Plusieurs cas en meme temps
Nombre de threads negatif
Mettre des fichiers qui n'existent pas
Changer l'ordre des arguments